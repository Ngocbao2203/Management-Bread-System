import { useState } from "react";
import { useSearchParams } from "react-router-dom";
import { motion } from "framer-motion";
import "../../styles/ResetPassword.css"; 

function ResetPassword() {
    const [searchParams] = useSearchParams();
    const token = searchParams.get("token"); // L·∫•y token t·ª´ URL

    const [password, setPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const [error, setError] = useState("");
    const [success, setSuccess] = useState(false);

    const handleResetPassword = async (e) => {
        e.preventDefault();

        if (password !== confirmPassword) {
            setError("M·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
            return;
        }

        try {
            const response = await fetch("/api/reset-password", {
                method: "POST",
                body: JSON.stringify({ token, password }),
                headers: { "Content-Type": "application/json" },
            });

            if (response.ok) {
                setSuccess(true);
            } else {
                setError("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
            }
        } catch (error) {
            setError("ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i!");
        }
    };

    if (success) {
        return (
            <motion.div
                className="reset-password-container"
                initial={{ opacity: 0, x: 0 }} 
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -100 }} 
                transition={{
                    duration: 0.5,
                    ease: "easeInOut",
                }}
            >
                <h2>M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng! <a href="/login">ƒêƒÉng nh·∫≠p</a></h2>
            </motion.div>
        );
    }

    return (
        <motion.div
            className="reset-password-container"
            initial={{ opacity: 0, x: 100 }} 
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -100 }} 
            transition={{
                duration: 0.5,
                ease: "easeInOut",
            }}
        >
            <h2>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
            {error && <p style={{ color: "red" }}>{error}</p>}
            <form onSubmit={handleResetPassword}>
                <div className="input-wrapper">
                    <span className="input-icon">üîí</span> {/* Lock icon for password */}
                    <input
                        type="password"
                        placeholder="M·∫≠t kh·∫©u m·ªõi"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        required
                    />
                </div>
                <div className="input-wrapper">
                    <span className="input-icon">üîí</span> {/* Lock icon for confirm password */}
                    <input
                        type="password"
                        placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                        value={confirmPassword}
                        onChange={(e) => setConfirmPassword(e.target.value)}
                        required
                    />
                </div>
                <button type="submit">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</button>
            </form>
        </motion.div>
    );
}

export default ResetPassword;